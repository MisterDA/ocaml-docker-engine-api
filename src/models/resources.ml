(*
 * This file has been generated by the OCamlClientCodegen generator for openapi-generator.
 *
 * Generated by: https://openapi-generator.tech
 *
 * Schema Resources.t : A container's resources (cgroups config, ulimits, etc)
 *)

type t = {
    (* An integer value representing this container's relative CPU weight versus other containers.  *)
    cpu_shares: int32 option [@default None];
    (* Memory limit in bytes. *)
    memory: int64 option [@default None];
    (* Path to `cgroups` under which the container's `cgroup` is created. If the path is not absolute, the path is considered to be relative to the `cgroups` path of the init process. Cgroups are created if they do not already exist.  *)
    cgroup_parent: string option [@default None];
    (* Block IO weight (relative weight). *)
    blkio_weight: int32 option [@default None];
    (* Block IO weight (relative device weight) in the form:  ``` [{\''Path\'': \''device_path\'', \''Weight\'': weight}] ```  *)
    blkio_weight_device: Resources_blkio_weight_device_inner.t list;
    (* Limit read rate (bytes per second) from a device, in the form:  ``` [{\''Path\'': \''device_path\'', \''Rate\'': rate}] ```  *)
    blkio_device_read_bps: Throttle_device.t list;
    (* Limit write rate (bytes per second) to a device, in the form:  ``` [{\''Path\'': \''device_path\'', \''Rate\'': rate}] ```  *)
    blkio_device_write_bps: Throttle_device.t list;
    (* Limit read rate (IO per second) from a device, in the form:  ``` [{\''Path\'': \''device_path\'', \''Rate\'': rate}] ```  *)
    blkio_device_read_i_ops: Throttle_device.t list;
    (* Limit write rate (IO per second) to a device, in the form:  ``` [{\''Path\'': \''device_path\'', \''Rate\'': rate}] ```  *)
    blkio_device_write_i_ops: Throttle_device.t list;
    (* The length of a CPU period in microseconds. *)
    cpu_period: int64 option [@default None];
    (* Microseconds of CPU time that the container can get in a CPU period.  *)
    cpu_quota: int64 option [@default None];
    (* The length of a CPU real-time period in microseconds. Set to 0 to allocate no time allocated to real-time tasks.  *)
    cpu_realtime_period: int64 option [@default None];
    (* The length of a CPU real-time runtime in microseconds. Set to 0 to allocate no time allocated to real-time tasks.  *)
    cpu_realtime_runtime: int64 option [@default None];
    (* CPUs in which to allow execution (e.g., `0-3`, `0,1`).  *)
    cpuset_cpus: string option [@default None];
    (* Memory nodes (MEMs) in which to allow execution (0-3, 0,1). Only effective on NUMA systems.  *)
    cpuset_mems: string option [@default None];
    (* A list of devices to add to the container. *)
    devices: Device_mapping.t list;
    (* a list of cgroup rules to apply to the container *)
    device_cgroup_rules: string list;
    (* A list of requests for devices to be sent to device drivers.  *)
    device_requests: Device_request.t list;
    (* Kernel memory limit in bytes.  <p><br /></p>  > **Deprecated**: This field is deprecated as the kernel 5.4 deprecated > `kmem.limit_in_bytes`.  *)
    kernel_memory: int64 option [@default None];
    (* Hard limit for kernel TCP buffer memory (in bytes). *)
    kernel_memory_tcp: int64 option [@default None];
    (* Memory soft limit in bytes. *)
    memory_reservation: int64 option [@default None];
    (* Total memory limit (memory + swap). Set as `-1` to enable unlimited swap.  *)
    memory_swap: int64 option [@default None];
    (* Tune a container's memory swappiness behavior. Accepts an integer between 0 and 100.  *)
    memory_swappiness: int64 option [@default None];
    (* CPU quota in units of 10<sup>-9</sup> CPUs. *)
    nano_cpus: int64 option [@default None];
    (* Disable OOM Killer for the container. *)
    oom_kill_disable: bool option [@default None];
    (* Run an init inside the container that forwards signals and reaps processes. This field is omitted if empty, and the default (as configured on the daemon) is used.  *)
    init: bool option [@default None];
    (* Tune a container's PIDs limit. Set `0` or `-1` for unlimited, or `null` to not change.  *)
    pids_limit: int64 option [@default None];
    (* A list of resource limits to set in the container. For example:  ``` {\''Name\'': \''nofile\'', \''Soft\'': 1024, \''Hard\'': 2048} ```  *)
    ulimits: Resources_ulimits_inner.t list;
    (* The number of usable CPUs (Windows only).  On Windows Server containers, the processor resource controls are mutually exclusive. The order of precedence is `CPUCount` first, then `CPUShares`, and `CPUPercent` last.  *)
    cpu_count: int64 option [@default None];
    (* The usable percentage of the available CPUs (Windows only).  On Windows Server containers, the processor resource controls are mutually exclusive. The order of precedence is `CPUCount` first, then `CPUShares`, and `CPUPercent` last.  *)
    cpu_percent: int64 option [@default None];
    (* Maximum IOps for the container system drive (Windows only) *)
    io_maximum_i_ops: int64 option [@default None];
    (* Maximum IO in bytes per second for the container system drive (Windows only).  *)
    io_maximum_bandwidth: int64 option [@default None];
} [@@deriving yojson { strict = false }, show ];;

(** A container's resources (cgroups config, ulimits, etc) *)
let create () : t = {
    cpu_shares = None;
    memory = None;
    cgroup_parent = None;
    blkio_weight = None;
    blkio_weight_device = [];
    blkio_device_read_bps = [];
    blkio_device_write_bps = [];
    blkio_device_read_i_ops = [];
    blkio_device_write_i_ops = [];
    cpu_period = None;
    cpu_quota = None;
    cpu_realtime_period = None;
    cpu_realtime_runtime = None;
    cpuset_cpus = None;
    cpuset_mems = None;
    devices = [];
    device_cgroup_rules = [];
    device_requests = [];
    kernel_memory = None;
    kernel_memory_tcp = None;
    memory_reservation = None;
    memory_swap = None;
    memory_swappiness = None;
    nano_cpus = None;
    oom_kill_disable = None;
    init = None;
    pids_limit = None;
    ulimits = [];
    cpu_count = None;
    cpu_percent = None;
    io_maximum_i_ops = None;
    io_maximum_bandwidth = None;
}

