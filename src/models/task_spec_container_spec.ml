(*
 * This file has been generated by the OCamlClientCodegen generator for openapi-generator.
 *
 * Generated by: https://openapi-generator.tech
 *
 * Schema Task_spec_container_spec.t : Container spec for the service.  <p><br /></p>  > **Note**: ContainerSpec, NetworkAttachmentSpec, and PluginSpec are > mutually exclusive. PluginSpec is only used when the Runtime field > is set to `plugin`. NetworkAttachmentSpec is used when the Runtime > field is set to `attachment`. 
 *)

type t = {
    (* The image name to use for the container *)
    image: string option [@default None];
    (* User-defined key/value data. *)
    labels: (string * string) list;
    (* The command to be run in the image. *)
    command: string list;
    (* Arguments to the command. *)
    args: string list;
    (* The hostname to use for the container, as a valid [RFC 1123](https://tools.ietf.org/html/rfc1123) hostname.  *)
    hostname: string option [@default None];
    (* A list of environment variables in the form `VAR=value`.  *)
    env: string list;
    (* The working directory for commands to run in. *)
    dir: string option [@default None];
    (* The user inside the container. *)
    user: string option [@default None];
    (* A list of additional groups that the container process will run as.  *)
    groups: string list;
    privileges: Task_spec_container_spec_privileges.t option [@default None];
    (* Whether a pseudo-TTY should be allocated. *)
    tty: bool option [@default None];
    (* Open `stdin` *)
    open_stdin: bool option [@default None];
    (* Mount the container's root filesystem as read only. *)
    read_only: bool option [@default None];
    (* Specification for mounts to be added to containers created as part of the service.  *)
    mounts: Mount.t list;
    (* Signal to stop the container. *)
    stop_signal: string option [@default None];
    (* Amount of time to wait for the container to terminate before forcefully killing it.  *)
    stop_grace_period: int64 option [@default None];
    health_check: Health_config.t option [@default None];
    (* A list of hostname/IP mappings to add to the container's `hosts` file. The format of extra hosts is specified in the [hosts(5)](http://man7.org/linux/man-pages/man5/hosts.5.html) man page:      IP_address canonical_hostname [aliases...]  *)
    hosts: string list;
    dns_config: Task_spec_container_spec_dns_config.t option [@default None];
    (* Secrets contains references to zero or more secrets that will be exposed to the service.  *)
    secrets: Task_spec_container_spec_secrets_inner.t list;
    (* Configs contains references to zero or more configs that will be exposed to the service.  *)
    configs: Task_spec_container_spec_configs_inner.t list;
    (* Isolation technology of the containers running the service. (Windows only)  *)
    isolation: Enums.isolation option [@default None];
    (* Run an init inside the container that forwards signals and reaps processes. This field is omitted if empty, and the default (as configured on the daemon) is used.  *)
    init: bool option [@default None];
    (* Set kernel namedspaced parameters (sysctls) in the container. The Sysctls option on services accepts the same sysctls as the are supported on containers. Note that while the same sysctls are supported, no guarantees or checks are made about their suitability for a clustered environment, and it's up to the user to determine whether a given sysctl will work properly in a Service.  *)
    sysctls: (string * string) list;
    (* A list of kernel capabilities to add to the default set for the container.  *)
    capability_add: string list;
    (* A list of kernel capabilities to drop from the default set for the container.  *)
    capability_drop: string list;
    (* A list of resource limits to set in the container. For example: `{\''Name\'': \''nofile\'', \''Soft\'': 1024, \''Hard\'': 2048}`\''  *)
    ulimits: Resources_ulimits_inner.t list;
} [@@deriving yojson { strict = false }, show ];;

(** Container spec for the service.  <p><br /></p>  > **Note**: ContainerSpec, NetworkAttachmentSpec, and PluginSpec are > mutually exclusive. PluginSpec is only used when the Runtime field > is set to `plugin`. NetworkAttachmentSpec is used when the Runtime > field is set to `attachment`.  *)
let create () : t = {
    image = None;
    labels = [];
    command = [];
    args = [];
    hostname = None;
    env = [];
    dir = None;
    user = None;
    groups = [];
    privileges = None;
    tty = None;
    open_stdin = None;
    read_only = None;
    mounts = [];
    stop_signal = None;
    stop_grace_period = None;
    health_check = None;
    hosts = [];
    dns_config = None;
    secrets = [];
    configs = [];
    isolation = None;
    init = None;
    sysctls = [];
    capability_add = [];
    capability_drop = [];
    ulimits = [];
}

