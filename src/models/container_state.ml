(*
 * This file has been generated by the OCamlClientCodegen generator for openapi-generator.
 *
 * Generated by: https://openapi-generator.tech
 *
 * Schema Container_state.t : ContainerState stores container's running state. It's part of ContainerJSONBase and will be returned by the \''inspect\'' command. 
 *)

type t = {
    (* String representation of the container state. Can be one of \''created\'', \''running\'', \''paused\'', \''restarting\'', \''removing\'', \''exited\'', or \''dead\''.  *)
    status: Enums.containerstate_status option [@default None];
    (* Whether this container is running.  Note that a running container can be _paused_. The `Running` and `Paused` booleans are not mutually exclusive:  When pausing a container (on Linux), the freezer cgroup is used to suspend all processes in the container. Freezing the process requires the process to be running. As a result, paused containers are both `Running` _and_ `Paused`.  Use the `Status` field instead to determine if a container's state is \''running\''.  *)
    running: bool option [@default None];
    (* Whether this container is paused. *)
    paused: bool option [@default None];
    (* Whether this container is restarting. *)
    restarting: bool option [@default None];
    (* Whether this container has been killed because it ran out of memory.  *)
    oom_killed: bool option [@default None];
    dead: bool option [@default None];
    (* The process ID of this container *)
    pid: int32 option [@default None];
    (* The last exit code of this container *)
    exit_code: int32 option [@default None];
    error: string option [@default None];
    (* The time when this container was last started. *)
    started_at: string option [@default None];
    (* The time when this container last exited. *)
    finished_at: string option [@default None];
    health: Health.t option [@default None];
} [@@deriving yojson { strict = false }, show ];;

(** ContainerState stores container's running state. It's part of ContainerJSONBase and will be returned by the \''inspect\'' command.  *)
let create () : t = {
    status = None;
    running = None;
    paused = None;
    restarting = None;
    oom_killed = None;
    dead = None;
    pid = None;
    exit_code = None;
    error = None;
    started_at = None;
    finished_at = None;
    health = None;
}

