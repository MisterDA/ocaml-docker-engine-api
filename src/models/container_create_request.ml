(*
 * This file has been generated by the OCamlClientCodegen generator for openapi-generator.
 *
 * Generated by: https://openapi-generator.tech
 *
 *)

type t = {
    (* The hostname to use for the container, as a valid RFC 1123 hostname.  *)
    hostname: string option [@default None];
    (* The domain name to use for the container.  *)
    domainname: string option [@default None];
    (* The user that commands are run as inside the container. *)
    user: string option [@default None];
    (* Whether to attach to `stdin`. *)
    attach_stdin: bool option [@default None];
    (* Whether to attach to `stdout`. *)
    attach_stdout: bool option [@default None];
    (* Whether to attach to `stderr`. *)
    attach_stderr: bool option [@default None];
    (* An object mapping ports to an empty object in the form:  `{\''<port>/<tcp|udp|sctp>\'': {}}`  *)
    exposed_ports: (string * Yojson.Safe.t) list;
    (* Attach standard streams to a TTY, including `stdin` if it is not closed.  *)
    tty: bool option [@default None];
    (* Open `stdin` *)
    open_stdin: bool option [@default None];
    (* Close `stdin` after one attached client disconnects *)
    stdin_once: bool option [@default None];
    (* A list of environment variables to set inside the container in the form `[\''VAR=value\'', ...]`. A variable without `=` is removed from the environment, rather than to have an empty value.  *)
    env: string list;
    (* Command to run specified as a string or an array of strings.  *)
    cmd: string list;
    healthcheck: Health_config.t option [@default None];
    (* Command is already escaped (Windows only) *)
    args_escaped: bool option [@default None];
    (* The name (or reference) of the image to use when creating the container, or which was used when the container was created.  *)
    image: string option [@default None];
    (* An object mapping mount point paths inside the container to empty objects.  *)
    volumes: (string * Yojson.Safe.t) list;
    (* The working directory for commands to run in. *)
    working_dir: string option [@default None];
    (* The entry point for the container as a string or an array of strings.  If the array consists of exactly one empty string (`[\''\'']`) then the entry point is reset to system default (i.e., the entry point used by docker when there is no `ENTRYPOINT` instruction in the `Dockerfile`).  *)
    entrypoint: string list;
    (* Disable networking for the container. *)
    network_disabled: bool option [@default None];
    (* MAC address of the container. *)
    mac_address: string option [@default None];
    (* `ONBUILD` metadata that were defined in the image's `Dockerfile`.  *)
    on_build: string list;
    (* User-defined key/value metadata. *)
    labels: (string * string) list;
    (* Signal to stop a container as a string or unsigned integer.  *)
    stop_signal: string option [@default None];
    (* Timeout to stop a container in seconds. *)
    stop_timeout: int32 option [@default None];
    (* Shell for when `RUN`, `CMD`, and `ENTRYPOINT` uses a shell.  *)
    shell: string list;
    host_config: Host_config.t option [@default None];
    networking_config: Networking_config.t option [@default None];
} [@@deriving yojson { strict = false }, show ];;

let create () : t = {
    hostname = None;
    domainname = None;
    user = None;
    attach_stdin = None;
    attach_stdout = None;
    attach_stderr = None;
    exposed_ports = [];
    tty = None;
    open_stdin = None;
    stdin_once = None;
    env = [];
    cmd = [];
    healthcheck = None;
    args_escaped = None;
    image = None;
    volumes = [];
    working_dir = None;
    entrypoint = [];
    network_disabled = None;
    mac_address = None;
    on_build = [];
    labels = [];
    stop_signal = None;
    stop_timeout = None;
    shell = [];
    host_config = None;
    networking_config = None;
}

