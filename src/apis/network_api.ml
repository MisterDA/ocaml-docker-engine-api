(*
 * This file has been generated by the OCamlClientCodegen generator for openapi-generator.
 *
 * Generated by: https://openapi-generator.tech
 *
 *)

let network_connect ~id ~container =
    let open Lwt.Infix in
    let uri = Request.build_uri "/networks/{id}/connect" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "id" (fun x -> x) id in
    let body = Request.write_as_json_body Network_disconnect_request.to_yojson container in
    Cohttp_lwt_unix.Client.call `POST uri ~headers ~body >>= fun (resp, body) ->
    Request.handle_unit_response resp

let network_create ~network_config =
    let open Lwt.Infix in
    let uri = Request.build_uri "/networks/create" in
    let headers = Request.default_headers in
    let body = Request.write_as_json_body Network_create_request.to_yojson network_config in
    Cohttp_lwt_unix.Client.call `POST uri ~headers ~body >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Network_create_response.of_yojson) resp body

let network_delete ~id =
    let open Lwt.Infix in
    let uri = Request.build_uri "/networks/{id}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "id" (fun x -> x) id in
    Cohttp_lwt_unix.Client.call `DELETE uri ~headers >>= fun (resp, body) ->
    Request.handle_unit_response resp

let network_disconnect ~id ~container =
    let open Lwt.Infix in
    let uri = Request.build_uri "/networks/{id}/disconnect" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "id" (fun x -> x) id in
    let body = Request.write_as_json_body Network_connect_request.to_yojson container in
    Cohttp_lwt_unix.Client.call `POST uri ~headers ~body >>= fun (resp, body) ->
    Request.handle_unit_response resp

let network_inspect ~id ?(verbose = false) ?scope () =
    let open Lwt.Infix in
    let uri = Request.build_uri "/networks/{id}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "id" (fun x -> x) id in
    let uri = Request.add_query_param uri "verbose" string_of_bool verbose in
    let uri = Request.maybe_add_query_param uri "scope" (fun x -> x) scope in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Network.of_yojson) resp body

let network_list ?filters () =
    let open Lwt.Infix in
    let uri = Request.build_uri "/networks" in
    let headers = Request.default_headers in
    let uri = Request.maybe_add_query_param uri "filters" (fun x -> x) filters in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as_list_of (JsonSupport.unwrap Network.of_yojson) resp body

let network_prune ?filters () =
    let open Lwt.Infix in
    let uri = Request.build_uri "/networks/prune" in
    let headers = Request.default_headers in
    let uri = Request.maybe_add_query_param uri "filters" (fun x -> x) filters in
    Cohttp_lwt_unix.Client.call `POST uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Network_prune_response.of_yojson) resp body

