(*
 * This file has been generated by the OCamlClientCodegen generator for openapi-generator.
 *
 * Generated by: https://openapi-generator.tech
 *
 *)

let get_plugin_privileges ~remote =
    let open Lwt.Infix in
    let uri = Request.build_uri "/plugins/privileges" in
    let headers = Request.default_headers in
    let uri = Request.add_query_param uri "remote" (fun x -> x) remote in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as_list_of (JsonSupport.unwrap Plugin_privilege.of_yojson) resp body

let plugin_create ~name ~tar_context () =
    let open Lwt.Infix in
    let uri = Request.build_uri "/plugins/create" in
    let headers = Request.default_headers in
    let uri = Request.add_query_param uri "name" (fun x -> x) name in
    let body = Request.write_as_json_body  tar_context in
    Cohttp_lwt_unix.Client.call `POST uri ~headers ~body >>= fun (resp, body) ->
    Request.handle_unit_response resp

let plugin_delete ~name ?(force = false) () =
    let open Lwt.Infix in
    let uri = Request.build_uri "/plugins/{name}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "name" (fun x -> x) name in
    let uri = Request.add_query_param uri "force" string_of_bool force in
    Cohttp_lwt_unix.Client.call `DELETE uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Plugin.of_yojson) resp body

let plugin_disable ~name =
    let open Lwt.Infix in
    let uri = Request.build_uri "/plugins/{name}/disable" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "name" (fun x -> x) name in
    Cohttp_lwt_unix.Client.call `POST uri ~headers >>= fun (resp, body) ->
    Request.handle_unit_response resp

let plugin_enable ~name ?(timeout = 0l) () =
    let open Lwt.Infix in
    let uri = Request.build_uri "/plugins/{name}/enable" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "name" (fun x -> x) name in
    let uri = Request.add_query_param uri "timeout" Int32.to_string timeout in
    Cohttp_lwt_unix.Client.call `POST uri ~headers >>= fun (resp, body) ->
    Request.handle_unit_response resp

let plugin_inspect ~name =
    let open Lwt.Infix in
    let uri = Request.build_uri "/plugins/{name}/json" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "name" (fun x -> x) name in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Plugin.of_yojson) resp body

let plugin_list ?filters () =
    let open Lwt.Infix in
    let uri = Request.build_uri "/plugins" in
    let headers = Request.default_headers in
    let uri = Request.maybe_add_query_param uri "filters" (fun x -> x) filters in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as_list_of (JsonSupport.unwrap Plugin.of_yojson) resp body

let plugin_pull ~remote ?name ?x_registry_auth ~body () =
    let open Lwt.Infix in
    let uri = Request.build_uri "/plugins/pull" in
    let headers = Request.default_headers in
    let headers = Request.maybe_add_header headers "X-Registry-Auth" (fun x -> x) x_registry_auth in
    let uri = Request.add_query_param uri "remote" (fun x -> x) remote in
    let uri = Request.maybe_add_query_param uri "name" (fun x -> x) name in
    let body = Request.write_as_json_body (JsonSupport.of_list_of Plugin_privilege.to_yojson) body in
    Cohttp_lwt_unix.Client.call `POST uri ~headers ~body >>= fun (resp, body) ->
    Request.handle_unit_response resp

let plugin_push ~name =
    let open Lwt.Infix in
    let uri = Request.build_uri "/plugins/{name}/push" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "name" (fun x -> x) name in
    Cohttp_lwt_unix.Client.call `POST uri ~headers >>= fun (resp, body) ->
    Request.handle_unit_response resp

let plugin_set ~name ~body () =
    let open Lwt.Infix in
    let uri = Request.build_uri "/plugins/{name}/set" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "name" (fun x -> x) name in
    let body = Request.write_as_json_body (JsonSupport.of_list_of JsonSupport.of_string) body in
    Cohttp_lwt_unix.Client.call `POST uri ~headers ~body >>= fun (resp, body) ->
    Request.handle_unit_response resp

let plugin_upgrade ~name ~remote ?x_registry_auth ~body () =
    let open Lwt.Infix in
    let uri = Request.build_uri "/plugins/{name}/upgrade" in
    let headers = Request.default_headers in
    let headers = Request.maybe_add_header headers "X-Registry-Auth" (fun x -> x) x_registry_auth in
    let uri = Request.replace_path_param uri "name" (fun x -> x) name in
    let uri = Request.add_query_param uri "remote" (fun x -> x) remote in
    let body = Request.write_as_json_body (JsonSupport.of_list_of Plugin_privilege.to_yojson) body in
    Cohttp_lwt_unix.Client.call `POST uri ~headers ~body >>= fun (resp, body) ->
    Request.handle_unit_response resp

