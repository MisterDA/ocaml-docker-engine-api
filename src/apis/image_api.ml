(*
 * This file has been generated by the OCamlClientCodegen generator for openapi-generator.
 *
 * Generated by: https://openapi-generator.tech
 *
 *)

let build_prune ?keep_storage ?all ?filters () =
    let open Lwt.Infix in
    let uri = Request.build_uri "/build/prune" in
    let headers = Request.default_headers in
    let uri = Request.maybe_add_query_param uri "keep-storage" Int64.to_string keep_storage in
    let uri = Request.maybe_add_query_param uri "all" string_of_bool all in
    let uri = Request.maybe_add_query_param uri "filters" (fun x -> x) filters in
    Cohttp_lwt_unix.Client.call `POST uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Build_prune_response.of_yojson) resp body

let image_build ?(dockerfile = "Dockerfile") ?t ?extrahosts ?remote ?(q = false) ?(nocache = false) ?cachefrom ?pull ?(rm = true) ?(forcerm = false) ?memory ?memswap ?cpushares ?cpusetcpus ?cpuperiod ?cpuquota ?buildargs ?shmsize ?squash ?labels ?networkmode ?(content_type = `ApplicationSlashxMinustar) ?x_registry_config ?platform ?target ?outputs ~input_stream () =
    let open Lwt.Infix in
    let uri = Request.build_uri "/build" in
    let headers = Request.default_headers in
    let headers = Request.add_header headers "Content-type" Enums.show_content_type content_type in
    let headers = Request.maybe_add_header headers "X-Registry-Config" (fun x -> x) x_registry_config in
    let uri = Request.add_query_param uri "dockerfile" (fun x -> x) dockerfile in
    let uri = Request.maybe_add_query_param uri "t" (fun x -> x) t in
    let uri = Request.maybe_add_query_param uri "extrahosts" (fun x -> x) extrahosts in
    let uri = Request.maybe_add_query_param uri "remote" (fun x -> x) remote in
    let uri = Request.add_query_param uri "q" string_of_bool q in
    let uri = Request.add_query_param uri "nocache" string_of_bool nocache in
    let uri = Request.maybe_add_query_param uri "cachefrom" (fun x -> x) cachefrom in
    let uri = Request.maybe_add_query_param uri "pull" (fun x -> x) pull in
    let uri = Request.add_query_param uri "rm" string_of_bool rm in
    let uri = Request.add_query_param uri "forcerm" string_of_bool forcerm in
    let uri = Request.maybe_add_query_param uri "memory" Int32.to_string memory in
    let uri = Request.maybe_add_query_param uri "memswap" Int32.to_string memswap in
    let uri = Request.maybe_add_query_param uri "cpushares" Int32.to_string cpushares in
    let uri = Request.maybe_add_query_param uri "cpusetcpus" (fun x -> x) cpusetcpus in
    let uri = Request.maybe_add_query_param uri "cpuperiod" Int32.to_string cpuperiod in
    let uri = Request.maybe_add_query_param uri "cpuquota" Int32.to_string cpuquota in
    let uri = Request.maybe_add_query_param uri "buildargs" (fun x -> x) buildargs in
    let uri = Request.maybe_add_query_param uri "shmsize" Int32.to_string shmsize in
    let uri = Request.maybe_add_query_param uri "squash" string_of_bool squash in
    let uri = Request.maybe_add_query_param uri "labels" (fun x -> x) labels in
    let uri = Request.maybe_add_query_param uri "networkmode" (fun x -> x) networkmode in
    let uri = Request.maybe_add_query_param uri "platform" (fun x -> x) platform in
    let uri = Request.maybe_add_query_param uri "target" (fun x -> x) target in
    let uri = Request.maybe_add_query_param uri "outputs" (fun x -> x) outputs in
    let body = Request.write_as_json_body  input_stream in
    Cohttp_lwt_unix.Client.call `POST uri ~headers ~body >>= fun (resp, body) ->
    Request.handle_unit_response resp

let image_commit ?container ?repo ?tag ?comment ?author ?(pause = true) ?changes ~container_config () =
    let open Lwt.Infix in
    let uri = Request.build_uri "/commit" in
    let headers = Request.default_headers in
    let uri = Request.maybe_add_query_param uri "container" (fun x -> x) container in
    let uri = Request.maybe_add_query_param uri "repo" (fun x -> x) repo in
    let uri = Request.maybe_add_query_param uri "tag" (fun x -> x) tag in
    let uri = Request.maybe_add_query_param uri "comment" (fun x -> x) comment in
    let uri = Request.maybe_add_query_param uri "author" (fun x -> x) author in
    let uri = Request.add_query_param uri "pause" string_of_bool pause in
    let uri = Request.maybe_add_query_param uri "changes" (fun x -> x) changes in
    let body = Request.write_as_json_body Container_config.to_yojson container_config in
    Cohttp_lwt_unix.Client.call `POST uri ~headers ~body >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Id_response.of_yojson) resp body

let image_create ?from_image ?from_src ?repo ?tag ?message ?x_registry_auth ?(changes = []) ?platform ~input_image () =
    let open Lwt.Infix in
    let uri = Request.build_uri "/images/create" in
    let headers = Request.default_headers in
    let headers = Request.maybe_add_header headers "X-Registry-Auth" (fun x -> x) x_registry_auth in
    let uri = Request.maybe_add_query_param uri "fromImage" (fun x -> x) from_image in
    let uri = Request.maybe_add_query_param uri "fromSrc" (fun x -> x) from_src in
    let uri = Request.maybe_add_query_param uri "repo" (fun x -> x) repo in
    let uri = Request.maybe_add_query_param uri "tag" (fun x -> x) tag in
    let uri = Request.maybe_add_query_param uri "message" (fun x -> x) message in
    let uri = Request.add_query_param_list uri "changes" (List.map (fun x -> x)) changes in
    let uri = Request.maybe_add_query_param uri "platform" (fun x -> x) platform in
    let body = Request.write_as_json_body JsonSupport.of_string input_image in
    Cohttp_lwt_unix.Client.call `POST uri ~headers ~body >>= fun (resp, body) ->
    Request.handle_unit_response resp

let image_delete ~name ?(force = false) ?(noprune = false) () =
    let open Lwt.Infix in
    let uri = Request.build_uri "/images/{name}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "name" (fun x -> x) name in
    let uri = Request.add_query_param uri "force" string_of_bool force in
    let uri = Request.add_query_param uri "noprune" string_of_bool noprune in
    Cohttp_lwt_unix.Client.call `DELETE uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as_list_of (JsonSupport.unwrap Image_delete_response_item.of_yojson) resp body

let image_get ~name =
    let open Lwt.Infix in
    let uri = Request.build_uri "/images/{name}/get" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "name" (fun x -> x) name in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.to_string) resp body

let image_get_all ?(names = []) () =
    let open Lwt.Infix in
    let uri = Request.build_uri "/images/get" in
    let headers = Request.default_headers in
    let uri = Request.add_query_param_list uri "names" (List.map (fun x -> x)) names in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.to_string) resp body

let image_history ~name =
    let open Lwt.Infix in
    let uri = Request.build_uri "/images/{name}/history" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "name" (fun x -> x) name in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as_list_of (JsonSupport.unwrap History_response_item.of_yojson) resp body

let image_inspect ~name =
    let open Lwt.Infix in
    let uri = Request.build_uri "/images/{name}/json" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "name" (fun x -> x) name in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Image_inspect.of_yojson) resp body

let image_list ?(all = false) ?filters ?(digests = false) () =
    let open Lwt.Infix in
    let uri = Request.build_uri "/images/json" in
    let headers = Request.default_headers in
    let uri = Request.add_query_param uri "all" string_of_bool all in
    let uri = Request.maybe_add_query_param uri "filters" (fun x -> x) filters in
    let uri = Request.add_query_param uri "digests" string_of_bool digests in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as_list_of (JsonSupport.unwrap Image_summary.of_yojson) resp body

let image_load ?(quiet = false) ~images_tarball () =
    let open Lwt.Infix in
    let uri = Request.build_uri "/images/load" in
    let headers = Request.default_headers in
    let uri = Request.add_query_param uri "quiet" string_of_bool quiet in
    let body = Request.write_as_json_body  images_tarball in
    Cohttp_lwt_unix.Client.call `POST uri ~headers ~body >>= fun (resp, body) ->
    Request.handle_unit_response resp

let image_prune ?filters () =
    let open Lwt.Infix in
    let uri = Request.build_uri "/images/prune" in
    let headers = Request.default_headers in
    let uri = Request.maybe_add_query_param uri "filters" (fun x -> x) filters in
    Cohttp_lwt_unix.Client.call `POST uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Image_prune_response.of_yojson) resp body

let image_push ~name ~x_registry_auth ?tag () =
    let open Lwt.Infix in
    let uri = Request.build_uri "/images/{name}/push" in
    let headers = Request.default_headers in
    let headers = Request.add_header headers "X-Registry-Auth" (fun x -> x) x_registry_auth in
    let uri = Request.replace_path_param uri "name" (fun x -> x) name in
    let uri = Request.maybe_add_query_param uri "tag" (fun x -> x) tag in
    Cohttp_lwt_unix.Client.call `POST uri ~headers >>= fun (resp, body) ->
    Request.handle_unit_response resp

let image_search ~term ?limit ?filters () =
    let open Lwt.Infix in
    let uri = Request.build_uri "/images/search" in
    let headers = Request.default_headers in
    let uri = Request.add_query_param uri "term" (fun x -> x) term in
    let uri = Request.maybe_add_query_param uri "limit" Int32.to_string limit in
    let uri = Request.maybe_add_query_param uri "filters" (fun x -> x) filters in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as_list_of (JsonSupport.unwrap Image_search_response_item.of_yojson) resp body

let image_tag ~name ?repo ?tag () =
    let open Lwt.Infix in
    let uri = Request.build_uri "/images/{name}/tag" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "name" (fun x -> x) name in
    let uri = Request.maybe_add_query_param uri "repo" (fun x -> x) repo in
    let uri = Request.maybe_add_query_param uri "tag" (fun x -> x) tag in
    Cohttp_lwt_unix.Client.call `POST uri ~headers >>= fun (resp, body) ->
    Request.handle_unit_response resp

