(*
 * This file has been generated by the OCamlClientCodegen generator for openapi-generator.
 *
 * Generated by: https://openapi-generator.tech
 *
 *)

let container_archive ~id ~path =
    let open Lwt.Infix in
    let uri = Request.build_uri "/containers/{id}/archive" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "id" (fun x -> x) id in
    let uri = Request.add_query_param uri "path" (fun x -> x) path in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.handle_unit_response resp

let container_archive_info ~id ~path =
    let open Lwt.Infix in
    let uri = Request.build_uri "/containers/{id}/archive" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "id" (fun x -> x) id in
    let uri = Request.add_query_param uri "path" (fun x -> x) path in
    Cohttp_lwt_unix.Client.call `HEAD uri ~headers >>= fun (resp, body) ->
    Request.handle_unit_response resp

let container_attach ~id ?detach_keys ?(logs = false) ?(stream = false) ?(stdin = false) ?(stdout = false) ?(stderr = false) () =
    let open Lwt.Infix in
    let uri = Request.build_uri "/containers/{id}/attach" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "id" (fun x -> x) id in
    let uri = Request.maybe_add_query_param uri "detachKeys" (fun x -> x) detach_keys in
    let uri = Request.add_query_param uri "logs" string_of_bool logs in
    let uri = Request.add_query_param uri "stream" string_of_bool stream in
    let uri = Request.add_query_param uri "stdin" string_of_bool stdin in
    let uri = Request.add_query_param uri "stdout" string_of_bool stdout in
    let uri = Request.add_query_param uri "stderr" string_of_bool stderr in
    Cohttp_lwt_unix.Client.call `POST uri ~headers >>= fun (resp, body) ->
    Request.handle_unit_response resp

let container_attach_websocket ~id ?detach_keys ?(logs = false) ?(stream = false) () =
    let open Lwt.Infix in
    let uri = Request.build_uri "/containers/{id}/attach/ws" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "id" (fun x -> x) id in
    let uri = Request.maybe_add_query_param uri "detachKeys" (fun x -> x) detach_keys in
    let uri = Request.add_query_param uri "logs" string_of_bool logs in
    let uri = Request.add_query_param uri "stream" string_of_bool stream in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.handle_unit_response resp

let container_changes ~id =
    let open Lwt.Infix in
    let uri = Request.build_uri "/containers/{id}/changes" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "id" (fun x -> x) id in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as_list_of (JsonSupport.unwrap Container_change_response_item.of_yojson) resp body

let container_create ~body ?name () =
    let open Lwt.Infix in
    let uri = Request.build_uri "/containers/create" in
    let headers = Request.default_headers in
    let uri = Request.maybe_add_query_param uri "name" (fun x -> x) name in
    let body = Request.write_as_json_body Container_create_request.to_yojson body in
    Cohttp_lwt_unix.Client.call `POST uri ~headers ~body >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Container_create_response.of_yojson) resp body

let container_delete ~id ?(v = false) ?(force = false) ?(link = false) () =
    let open Lwt.Infix in
    let uri = Request.build_uri "/containers/{id}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "id" (fun x -> x) id in
    let uri = Request.add_query_param uri "v" string_of_bool v in
    let uri = Request.add_query_param uri "force" string_of_bool force in
    let uri = Request.add_query_param uri "link" string_of_bool link in
    Cohttp_lwt_unix.Client.call `DELETE uri ~headers >>= fun (resp, body) ->
    Request.handle_unit_response resp

let container_export ~id =
    let open Lwt.Infix in
    let uri = Request.build_uri "/containers/{id}/export" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "id" (fun x -> x) id in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.handle_unit_response resp

let container_inspect ~id ?(size = false) () =
    let open Lwt.Infix in
    let uri = Request.build_uri "/containers/{id}/json" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "id" (fun x -> x) id in
    let uri = Request.add_query_param uri "size" string_of_bool size in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Container_inspect_response.of_yojson) resp body

let container_kill ~id ?(signal = "SIGKILL") () =
    let open Lwt.Infix in
    let uri = Request.build_uri "/containers/{id}/kill" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "id" (fun x -> x) id in
    let uri = Request.add_query_param uri "signal" (fun x -> x) signal in
    Cohttp_lwt_unix.Client.call `POST uri ~headers >>= fun (resp, body) ->
    Request.handle_unit_response resp

let container_list ?(all = false) ?limit ?(size = false) ?filters () =
    let open Lwt.Infix in
    let uri = Request.build_uri "/containers/json" in
    let headers = Request.default_headers in
    let uri = Request.add_query_param uri "all" string_of_bool all in
    let uri = Request.maybe_add_query_param uri "limit" Int32.to_string limit in
    let uri = Request.add_query_param uri "size" string_of_bool size in
    let uri = Request.maybe_add_query_param uri "filters" (fun x -> x) filters in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as_list_of (JsonSupport.unwrap Container_summary.of_yojson) resp body

let container_logs ~id ?(follow = false) ?(stdout = false) ?(stderr = false) ?(since = 0l) ?(until = 0l) ?(timestamps = false) ?(tail = "all") () =
    let open Lwt.Infix in
    let uri = Request.build_uri "/containers/{id}/logs" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "id" (fun x -> x) id in
    let uri = Request.add_query_param uri "follow" string_of_bool follow in
    let uri = Request.add_query_param uri "stdout" string_of_bool stdout in
    let uri = Request.add_query_param uri "stderr" string_of_bool stderr in
    let uri = Request.add_query_param uri "since" Int32.to_string since in
    let uri = Request.add_query_param uri "until" Int32.to_string until in
    let uri = Request.add_query_param uri "timestamps" string_of_bool timestamps in
    let uri = Request.add_query_param uri "tail" (fun x -> x) tail in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.to_string) resp body

let container_pause ~id =
    let open Lwt.Infix in
    let uri = Request.build_uri "/containers/{id}/pause" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "id" (fun x -> x) id in
    Cohttp_lwt_unix.Client.call `POST uri ~headers >>= fun (resp, body) ->
    Request.handle_unit_response resp

let container_prune ?filters () =
    let open Lwt.Infix in
    let uri = Request.build_uri "/containers/prune" in
    let headers = Request.default_headers in
    let uri = Request.maybe_add_query_param uri "filters" (fun x -> x) filters in
    Cohttp_lwt_unix.Client.call `POST uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Container_prune_response.of_yojson) resp body

let container_rename ~id ~name =
    let open Lwt.Infix in
    let uri = Request.build_uri "/containers/{id}/rename" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "id" (fun x -> x) id in
    let uri = Request.add_query_param uri "name" (fun x -> x) name in
    Cohttp_lwt_unix.Client.call `POST uri ~headers >>= fun (resp, body) ->
    Request.handle_unit_response resp

let container_resize ~id ?h ?w () =
    let open Lwt.Infix in
    let uri = Request.build_uri "/containers/{id}/resize" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "id" (fun x -> x) id in
    let uri = Request.maybe_add_query_param uri "h" Int32.to_string h in
    let uri = Request.maybe_add_query_param uri "w" Int32.to_string w in
    Cohttp_lwt_unix.Client.call `POST uri ~headers >>= fun (resp, body) ->
    Request.handle_unit_response resp

let container_restart ~id ?t () =
    let open Lwt.Infix in
    let uri = Request.build_uri "/containers/{id}/restart" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "id" (fun x -> x) id in
    let uri = Request.maybe_add_query_param uri "t" Int32.to_string t in
    Cohttp_lwt_unix.Client.call `POST uri ~headers >>= fun (resp, body) ->
    Request.handle_unit_response resp

let container_start ~id ?detach_keys () =
    let open Lwt.Infix in
    let uri = Request.build_uri "/containers/{id}/start" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "id" (fun x -> x) id in
    let uri = Request.maybe_add_query_param uri "detachKeys" (fun x -> x) detach_keys in
    Cohttp_lwt_unix.Client.call `POST uri ~headers >>= fun (resp, body) ->
    Request.handle_unit_response resp

let container_stats ~id ?(stream = true) ?(one_shot = false) () =
    let open Lwt.Infix in
    let uri = Request.build_uri "/containers/{id}/stats" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "id" (fun x -> x) id in
    let uri = Request.add_query_param uri "stream" string_of_bool stream in
    let uri = Request.add_query_param uri "one-shot" string_of_bool one_shot in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body  resp body

let container_stop ~id ?t () =
    let open Lwt.Infix in
    let uri = Request.build_uri "/containers/{id}/stop" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "id" (fun x -> x) id in
    let uri = Request.maybe_add_query_param uri "t" Int32.to_string t in
    Cohttp_lwt_unix.Client.call `POST uri ~headers >>= fun (resp, body) ->
    Request.handle_unit_response resp

let container_top ~id ?(ps_args = "-ef") () =
    let open Lwt.Infix in
    let uri = Request.build_uri "/containers/{id}/top" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "id" (fun x -> x) id in
    let uri = Request.add_query_param uri "ps_args" (fun x -> x) ps_args in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Container_top_response.of_yojson) resp body

let container_unpause ~id =
    let open Lwt.Infix in
    let uri = Request.build_uri "/containers/{id}/unpause" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "id" (fun x -> x) id in
    Cohttp_lwt_unix.Client.call `POST uri ~headers >>= fun (resp, body) ->
    Request.handle_unit_response resp

let container_update ~id ~update =
    let open Lwt.Infix in
    let uri = Request.build_uri "/containers/{id}/update" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "id" (fun x -> x) id in
    let body = Request.write_as_json_body Container_update_request.to_yojson update in
    Cohttp_lwt_unix.Client.call `POST uri ~headers ~body >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Container_update_response.of_yojson) resp body

let container_wait ~id ?(condition = `NotMinusrunning) () =
    let open Lwt.Infix in
    let uri = Request.build_uri "/containers/{id}/wait" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "id" (fun x -> x) id in
    let uri = Request.add_query_param uri "condition" Enums.show_condition_0 condition in
    Cohttp_lwt_unix.Client.call `POST uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Container_wait_response.of_yojson) resp body

let put_container_archive ~id ~path ~input_stream ?no_overwrite_dir_non_dir ?copy_uidgid () =
    let open Lwt.Infix in
    let uri = Request.build_uri "/containers/{id}/archive" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "id" (fun x -> x) id in
    let uri = Request.add_query_param uri "path" (fun x -> x) path in
    let uri = Request.maybe_add_query_param uri "noOverwriteDirNonDir" (fun x -> x) no_overwrite_dir_non_dir in
    let uri = Request.maybe_add_query_param uri "copyUIDGID" (fun x -> x) copy_uidgid in
    let body = Request.write_as_json_body  input_stream in
    Cohttp_lwt_unix.Client.call `PUT uri ~headers ~body >>= fun (resp, body) ->
    Request.handle_unit_response resp

